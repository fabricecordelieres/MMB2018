

radius=15;






//---------------------------------------------------------
// GLOBAL VARIABLES
//---------------------------------------------------------

//---------------Options for axis of profiles-------------------
var X_PROFILE=0;
var Y_PROFILE=1;

//------------------Options for display-----------------------
var output_Types=newArray("Show Vorono√Ø-based tiles", "Show squares", "Show circles");
var OUTPUT_VORONOI=0;
var OUTPUT_SQUARES=1;
var OUTPUT_CIRCLES=2;
var OUTPUT_ARROWS=3;

//---------------------Default Options-----------------------
var radius=15; //Half-length of profiles
var noiseTolerance=64; //Detection: noise tolerance
var spotsRadius=50; //Spot size
var generateR2Maps=true; //Generate R2 maps when fitting



//---------------------------------------------------------
// LAUNCH
//---------------------------------------------------------
 resolution_GUI();



//---------------------------------------------------------
// FUNCTIONS
//---------------------------------------------------------

//---------------------------------------------------------
/*
 Resolution: Graphical User Interface & launcher
*/
//---------------------------------------------------------
function resolution_GUI(){
	if(nImages!=1) exit ("Exactly one image should be opened");

	ori=getTitle();
	run("Select None");
	run("Remove Overlay");
	getDimensions(width, height, channels, slices, frames);
	getPixelSize(unit, pixelWidth, pixelHeight);

	//Display GUI
	Dialog.create("Resolution check");
	Dialog.addNumber("Noise_tolerance", noiseTolerance);
	Dialog.addNumber("Half-length_of_profiles_(in_pixels)", radius);
	Dialog.addChoice("Output type", output_Types);
	Dialog.addNumber("Output_ROI_radius/size_(in_pixels_or_-1_for_none)", spotsRadius);
	Dialog.addCheckbox("Generate_R2_maps", true);
	Dialog.show();

	//Retrieve all parameters
	noiseTolerance=Dialog.getNumber();
	radius=Dialog.getNumber();
	outputType= choicesToIndex(output_Types, Dialog.getChoice());
	spotsRadius=Dialog.getNumber();

	//Clean up
	roiManager("Reset");
	run("Clear Results");
	run("Remove Overlay");
	
	//Detection and X profiles
	run("Find Maxima...", "noise="+noiseTolerance+" output=[Point Selection]");
	fitProfile(X_PROFILE, radius, true);

	//Detection and Y profiles
	run("Find Maxima...", "noise="+noiseTolerance+" output=[Point Selection]");
	fitProfile(Y_PROFILE, radius, true);
	
	//Display over the original image
	ori=getTitle();
	roiManager("Show All");
	run("From ROI Manager"); //Detections printed as overlay on the original image
	
	//Output: Show resolution maps
	selectWindow(ori);
	getImageData(outputType, "Detection_X", "Detection_Y", "Resolution_X_("+unit+")", "", "", spotsRadius, 1); //Image of resolution along X
	rename("Image_Resolution_X");

	selectWindow(ori);
	getImageData(outputType, "Detection_X", "Detection_Y", "Resolution_Y_("+unit+")", "", "", spotsRadius, 1); //Image of resolution along Y
	rename("Image_Resolution_Y");

	selectWindow(ori);
	if(Dialog.getCheckbox()){
		getImageData(outputType, "Detection_X", "Detection_Y", "R2_X", "", "", spotsRadius, 1); //Image of R2 along X
		rename("Image_Resolution_X_R2");
		getImageData(outputType, "Detection_X", "Detection_Y", "R2_Y", "", "", spotsRadius, 1); //Image of R2 along Y
		rename("Image_Resolution_Y_R2");
	}

	run("Tile");
}


//---------------------------------------------------------
/*
From the current multiple points selection, fr each point, extracts 
the intensity profile along the input direction, then logs the fitted
parameters and calculated FWHM to the results window
*/
//---------------------------------------------------------
function fitProfile(axis, radius, addToManager){
	getPixelSize(unit, pixelWidth, pixelHeight);

	if(selectionType()!=10) exit("This function requires the selection to be multi-point");
	getSelectionCoordinates(xpoints, ypoints);

	if(axis==X_PROFILE){
		calibration=pixelWidth;
		axisName="X";
		color="green";
	}
	if(axis==Y_PROFILE){
		calibration=pixelHeight;
		axisName="Y";
		color="red";
	}
	
	for(i=0; i<xpoints.length; i++){
		setResult("Detection_X", i, xpoints[i]);
		setResult("Detection_Y", i, ypoints[i]);

		setLineWidth(3); //Acquisition are supposed to have been made appropriate sampling: 1 resel=3 pixels
		if(axis==X_PROFILE) makeLine(xpoints[i]-radius, ypoints[i], xpoints[i]+radius, ypoints[i]);
		if(axis==Y_PROFILE) makeLine(xpoints[i], ypoints[i]-radius, xpoints[i], ypoints[i]+radius);

		intensities=getProfile();

		positions=newArray(intensities.length); //Stores positions along the axis
		for(j=0; j<positions.length; j++) positions[j]=(j-positions.length/2)*pixelWidth;

		Fit.doFit("Gaussian", positions, intensities);

		for(j=0; j<Fit.nParams; j++) setResult("Parameter_"+(j+1)+"_"+axisName, i, Fit.p(j));

		setResult("R2_"+axisName, i, Fit.rSquared);
		resolution=2*sqrt(2*log(2))*Fit.p(3);
		setResult("Resolution_"+axisName+"_("+unit+")", i, resolution);

		if(addToManager){
			resolution=resolution/2;
			if(axis==X_PROFILE) makeLine(xpoints[i]-(resolution+Fit.p(2))/pixelWidth, ypoints[i], xpoints[i]+(resolution-Fit.p(2))/pixelWidth, ypoints[i]);
			if(axis==Y_PROFILE) makeLine(xpoints[i], ypoints[i]-(resolution+Fit.p(2))/pixelHeight, xpoints[i], ypoints[i]+(resolution-Fit.p(2))/pixelHeight);

			Roi.setName("Detection_"+(i+1)+"_"+axisName+"_profile");
			Roi.setStrokeColor(color);
			roiManager("Add");
		}
	}
	run("Select None");
}

//---------------------------------------------------------
/*
Generate an output image, based on the following input
	-the input data (give the X, Y and data column's names)
	-if applicable, the angle and distance values
	-for circles/square: size
	-for arrows: scale to be applied to distances
*/
//---------------------------------------------------------
function getImageData(outputType, xTitle, yTitle, dataTitle, angleTitle, distanceTitle, size, scale){
	//Retrieve and set basic parameters
	ori=getTitle;
	imgWidth=getWidth;
	imgHeight=getHeight;
	data=getColumn(dataTitle);
	setForegroundColor(1, 1, 1);
	
	//Switch action depending on requested output
	if(outputType==OUTPUT_SQUARES || outputType==OUTPUT_CIRCLES) generateShapeROIs(xTitle, yTitle, outputType, size);
	if(outputType==OUTPUT_VORONOI) generateVoronoiTileROIs(xTitle, yTitle);
	if(outputType==OUTPUT_ARROWS) generateArrowROIs(xTitle, yTitle, angleTitle, distanceTitle, scale, size);
	
	//Fill ROIs with data
	newImage("Image_data", "32-bit black", imgWidth, imgHeight, 1);
	if(dataTitle=="") data=getSeq(roiManager("Count")); //In case not data is available, data is a sequence of numbers (1 for 1st object, 2 for 2nd...)
	for(i=0; i<roiManager("Count"); i++){
		roiManager("Select", i);
		if(outputType!=OUTPUT_ARROWS){
			run("Add...", "value="+data[i]);
		}else{
			run("Fill", "slice");
		}
	}
	run("Select None");
	resetMinAndMax;
}


//---------------------------------------------------------
/*
Generates either circular or square ROIs, using the provided coordinates
(results table columns' names) and size
*/
//---------------------------------------------------------
function generateShapeROIs(xTitle, yTitle, shape, size){
	//Retrieve the locations
	x=getColumn(xTitle);
	y=getColumn(yTitle);
	
	//Generate Rois for output
	roiManager("Reset");
	for(i=0; i<x.length; i++){
		if(shape==OUTPUT_SQUARES) makeRectangle(x[i]-size/2, y[i]-size/2, size, size);
		if(shape==OUTPUT_CIRCLES)	makeOval(x[i]-size/2, y[i]-size/2, size, size);
		
		if(selectionType()!=-1){
			Roi.setName("ROI_"+(i+1));
			roiManager("Add");
		}
	}
	run("Select None");
}


//---------------------------------------------------------
/*
Generates arrow shaped ROIs, using the provided coordinates
(results table columns' names), angles/distances, size and scale
*/
//---------------------------------------------------------
function generateArrowROIs(xTitle, yTitle, angleTitle, distanceTitle, scale, size){
	//Retrieve the locations
	x=getColumn(xTitle);
	y=getColumn(yTitle);

	//Retrieve the measurements
	angle=getColumn(angleTitle);
	distance=getColumn(distanceTitle);

	//Generate Rois for output
	run("Arrow Tool...", "width="+scale+" size="+scale/2+" color=White style=Filled");
	roiManager("Reset");
	for(i=0; i<x.length; i++){
		angle[i]=PI/180*angle[i];

		x2=x[i]+(2*scale+1)*distance[i]*cos(angle[i]);
		y2=y[i]+(2*scale+1)*distance[i]*sin(angle[i]);
					
		if(x[i]!=x2 && y[i]!=y2){
			makeArrow(x[i], y[i], x2, y2, "filled large");
		}else{
			makeOval(x[i]-size, y[i]-si, 2*size+1, 2*size+1);
		}
		
		if(selectionType()!=-1){
			Roi.setName("ROI_"+(i+1));
			roiManager("Add");
		}
	}
	run("Select None");
}


//---------------------------------------------------------
/*
Generates tiles shaped ROIs, using the provided coordinates
(results table columns' names), and performing voronoi teselation
*/
//---------------------------------------------------------
function generateVoronoiTileROIs(xTitle, yTitle){
	//Retrieve the locations
	x=getColumn(xTitle);
	y=getColumn(yTitle);

	//Generate a temporary image to get tiles
	newImage("Image_tiles", "8-bit white", imgWidth, imgHeight, 1);
	//Draw dots
	setForegroundColor(0, 0, 0);
	makeSelection("point", x, y);
	run("Draw", "slice");
	run("Voronoi");
	setThreshold(0, 0);
	
	
	//Generate Rois for output
	roiManager("Reset");
	for(i=0; i<x.length; i++){
		doWand(x[i], y[i]);
		
		if(selectionType()!=-1){
			Roi.setName("ROI_"+(i+1));
			roiManager("Add");
		}
	}
	run("Select None");
	close("Image_tiles");
	setTool("rectangle");
}


//---------------------------------------------------------
/*
From an input list, returns the index of the input component,
or -1 if not found
*/
//---------------------------------------------------------
function choicesToIndex(choicesArray, choice){
	for(i=0; i<choicesArray.length; i++) if(choicesArray[i]==choice) return i;
	return -1;
}


//---------------------------------------------------------
/*
Generates a sequence of numbers, from 0 to n-1
*/
//---------------------------------------------------------
function getSeq(n){
	out=newArray(n);
	for(i=1; i<=n; i++) out[i-1]=""+i;
	return out;
}


//---------------------------------------------------------
/*
Based on its title, returns as an array the content of a column 
from the results table
*/
//---------------------------------------------------------
function getColumn(title){
	out=newArray(nResults);
	for(i=0; i<nResults; i++) out[i]=getResult(title, i);
	return out;
}
